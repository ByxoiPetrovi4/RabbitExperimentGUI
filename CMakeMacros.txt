#Read subdirectory list from curdir
#and save it to result

MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child} AND EXISTS ${curdir}/${child}/CMakeLists.txt)
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

MACRO(SET_DEFAULT_SETTINGS)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set(CMAKE_CXX_FLAGS "-O3")

    set(CMAKE_AUTOUIC ON)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)

    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)

    find_package(QT NAMES Qt6 Qt5 COMPONENTS Core Gui Widgets REQUIRED)
    find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Gui Widgets REQUIRED)
ENDMACRO()

#Create Qt Lib with extra linked libs
#Create /tests/main.cpp for unity tests
#extra files for testing passes to /tests/main.cpp in argv
#extra files should be in the test directory

MACRO(standard_qt_lib target libs test_files)
    target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
    if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
        qt_add_library(${target}
            MANUAL_FINALIZATION
            ${PROJECT_SOURCES}
        )
    else()
        if(ANDROID)
            add_library(${target} SHARED
                ${PROJECT_SOURCES}
            )
        else()
            add_library(${target}
                ${PROJECT_SOURCES}
            )
        endif()
    endif()

    target_link_libraries(${target} PRIVATE
                    Qt::Core
                    Qt::Gui
                    Qt::Widgets
                )
    target_link_libraries(${target} PRIVATE
                    ${${libs}})
    if(QT_VERSION_MAJOR EQUAL 6)
        qt_finalize_executable(${target})
    endif()
    if(${ARGC} GREATER_EQUAL 2)
        add_executable(${target}Test ${CMAKE_CURRENT_SOURCE_DIR}/tests/main.cpp)
        target_link_libraries(${target}Test PRIVATE
                        Qt::Core
                        Qt::Gui
                        Qt::Widgets
                    )
        target_link_libraries(${target}Test PRIVATE
                        ${${libs}})
        target_link_libraries(${target}Test PRIVATE ${target})

        add_test(NAME ${target}Test COMMAND ${target}Test ${CMAKE_CURRENT_SOURCE_DIR}/tests/ ${${test_files})

        set (passRegex "^Test passed" "^All ok")
        set (failRegex "Error" "Fail")

        set_property (TEST ${target}Test
                      PROPERTY PASS_REGULAR_EXPRESSION "${passRegex}")
        set_property (TEST ${target}Test
                      PROPERTY FAIL_REGULAR_EXPRESSION "${failRegex}")
    endif()
    message(${CMAKE_SOURCE_DIR})
    target_include_directories(${target} PUBLIC ${CMAKE_SOURCE_DIR})
    target_include_directories(${target}Test PUBLIC ${CMAKE_SOURCE_DIR})
ENDMACRO()
